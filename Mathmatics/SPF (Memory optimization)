const int N = 1e8+7;
short spf[N];

void SPF() 
{
    // loop over primes
    for(int i = 2; i*i < N; i++) 
    { 
        if(spf[i] != 0) continue; // only prime numbers are never changed (spf is initalized to 0)

        for(int j = i*i; j < N; j+= i) { // loop over multiples of i
            if(spf[j] == 0)
                spf[j] = i; // the first prime factor is always the smallest
        }
    }
}

// get all the prime factors of x using spf
// must call SPF first, returns a vector with all prime factors
// factorization is done in O(log(n)) time since number of primes can go up to log(n))
vector<int> getFactors(int x) {
    vector<int> ret;
    while(x > 1) {
        int p = spf[x];
        if(p == 0)
            p = x; // if p is a prime in our code spf[p] will give us 0
        ret.push_back(p);
        x/=p;
    }
    return ret;
}

// get all the prime factors of x using spf
// must call SPF first, returns a vector with all UNIQUE prime factors
// factorization is done in O(log(n)) time since number of primes can go up to log(n))
// notice that number of UNIQUE factors is only up to log(log(n)) but the factorization is still done in log(n)
vector<int> getUniqueFactors(int x) {
    vector<int> ret;
    while(x > 1) {
        int p = spf[x];
        if(p == 0)
            p = x; // if p is a prime in our code spf[p] will give us 0
        ret.push_back(p);
        while(x%p == 0)
            x/=p;
    }
    return ret;
}
